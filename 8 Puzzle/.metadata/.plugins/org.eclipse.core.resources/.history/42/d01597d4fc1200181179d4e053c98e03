import java.util.Comparator;
import java.util.LinkedList;

import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.MinPQ;
import edu.princeton.cs.algs4.StdOut;

public final class Solver {

	private final SearchNode goal; // the goal node
	private final LinkedList<Board> solution;

	private class SearchNode {
		private Board board; // present board
		private int moves; // number of moves to reach this board
		private SearchNode predecessor; // previous SearchNode
		private boolean istwin; // true for twin

		private class ByHamming implements Comparator<SearchNode> {

			public int compare(SearchNode a, SearchNode b) {
				int apriority = a.moves + a.board.hamming();
				int bpriority = a.moves + a.board.hamming();
				if (apriority < bpriority)
					return -1;
				else if (apriority > bpriority)
					return +1;
				else
					return 0;
			}
		}

		private class ByManhattan implements Comparator<SearchNode> {

			public int compare(SearchNode a, SearchNode b) {
				int apriority = a.moves + a.board.manhattan();
				int bpriority = b.moves + b.board.manhattan();
				if (apriority < bpriority)
					return -1;
				else if (apriority > bpriority)
					return +1;
				else
					return 0;
			}
		}

		public SearchNode(Board board, int moves, SearchNode predecessor, boolean istwin) {
			this.board = board;
			this.moves = moves;
			this.predecessor = predecessor;
			this.istwin = istwin;
		}

		// comparator
		public Comparator<SearchNode> hammingPriority() {
			return new ByHamming();
		}

		public Comparator<SearchNode> manhattanPriority() {
			return new ByManhattan();
		}

	}

	// find a solution to the initial board
	public Solver(Board initial) {
		if (initial == null)
			throw new java.lang.IllegalArgumentException("Illegal Argument");
		solution = new LinkedList<Board>();
		int type = 0;// 0 for unknown, 1 for solvable, -1 for unsolvable
		// SearchNode node1 = new SearchNode(initial, 0, null,false);// node1 is for the
		// initial board
		// SearchNode node2 = new SearchNode(initial.twin(), 0, null,true);// node2 is
		// for the twin board
		// // pq1 is for the initial board
		// MinPQ<SearchNode> pq1 = new MinPQ<SearchNode>(node1.manhattanPriority());
		// // MinPQ<SearchNode> pq1 = new MinPQ<SearchNode>(node1.hammingPriority());
		// // pq2 is for the twin board
		// MinPQ<SearchNode> pq2 = new MinPQ<SearchNode>(node2.manhattanPriority());
		// // MinPQ<SearchNode> pq2 = new MinPQ<SearchNode>(node2.hammingPriority());
		// pq1.insert(node1);
		// pq2.insert(node2);
		// node1 = pq1.delMin();
		// node2 = pq2.delMin();
		// if (node1.board.isGoal())
		// type = 1;
		// else if (node2.board.isGoal())
		// type = -1;
		// while (type == 0) {
		// for (Board b : node1.board.neighbors()) {
		// SearchNode neighbors = new SearchNode(b, node1.moves + 1, node1);
		// if (!neighbors.board.equals(neighbors.predecessor.board))
		// pq1.insert(neighbors);
		// }
		// node1 = pq1.delMin();
		// if (node1.board.isGoal()) {
		// type = 1;
		// break;
		// }
		// for (Board b : node2.board.neighbors()) {
		// SearchNode neighbors = new SearchNode(b, node2.moves + 1, node2);
		// if (!neighbors.board.equals(neighbors.predecessor.board))
		// pq2.insert(neighbors);
		// }
		// node2 = pq2.delMin();
		// if (node2.board.isGoal())
		// type = -1;
		// }
		SearchNode node;
		MinPQ<SearchNode> mpq = new MinPQ<SearchNode>(node.hammingPriority());
		mpq.insert(new SearchNode(initial, 0, null, false));
		mpq.insert(new SearchNode(initial, 0, null, true));
		node = mpq.delMin();
		if (node.board.isGoal()) {
			if (node.istwin)
				type = -1;
			else
				type = 1;
		}
		while (type == 0) {
			for (Board b : node.board.neighbors())
				if (!b.equals(node.predecessor.board))
					mpq.insert(new SearchNode(b, node.moves + 1, node, node.istwin));
			if (node.board.isGoal()) {
				if (node.istwin)
					type = -1;
				else
					type = 1;
			}
		}
		if (type == 1)
			goal = new SearchNode(node1.board, node1.moves, node1.predecessor);
		else
			goal = null;
		if (goal != null) {
			SearchNode previous = goal.predecessor;
			SearchNode present = goal;
			solution.addFirst(present.board);
			while (previous != null) {
				present = previous;
				previous = previous.predecessor;
				solution.addFirst(present.board);
			}
		}
	}

	// is the initial board solvable?
	public boolean isSolvable() {
		if (goal != null)
			return true;
		else
			return false;
	}

	// min number of moves to solve initial board; -1 if unsolvable
	public int moves() {
		if (goal != null)
			return goal.moves;
		else
			return -1;
	}

	// sequence of boards in a shortest solution; null if unsolvable
	public Iterable<Board> solution() {
		return solution;
	}

	// solve a slider puzzle
	public static void main(String[] args) {

		System.out.println("hello world");
		// create initial board from file
		In in = new In(args[0]);
		int n = in.readInt();
		int[][] blocks = new int[n][n];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++)
				blocks[i][j] = in.readInt();
		Board initial = new Board(blocks);

		// solve the puzzle
		Solver solver = new Solver(initial);

		// print solution to stand`ard output
		if (!solver.isSolvable())
			StdOut.println("No solution possible");
		else {
			StdOut.println("Minimum number of moves = " + solver.moves());
			for (Board board : solver.solution())
				StdOut.println(board);
		}
	}
}
