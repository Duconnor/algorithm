import java.util.Comparator;
import edu.princeton.cs.algs4.MinPQ;

public class Solver {

	private SearchNode goal; // the goal node
	private Board initial;

	private class SearchNode {
		private Board board; // present board
		private int moves; // number of moves to reach this board
		private SearchNode predecessor; // previous SearchNode

		private class ByHamming implements Comparator<SearchNode> {

			public int compare(SearchNode a, SearchNode b) {
				int apriority = a.moves + a.board.hamming();
				int bpriority = a.moves + a.board.hamming();
				if (apriority < bpriority)
					return -1;
				else if (apriority > bpriority)
					return +1;
				else
					return 0;
			}
		}

		private class ByManhattan implements Comparator<SearchNode> {

			public int compare(SearchNode a, SearchNode b) {
				int apriority = a.moves + a.board.manhattan();
				int bpriority = b.moves + b.board.manhattan();
				if (apriority < bpriority)
					return -1;
				else if (apriority > bpriority)
					return +1;
				else
					return 0;
			}
		}

		public SearchNode(Board board, int moves, SearchNode predecessor) {
			this.board = board;
			this.moves = moves;
			this.predecessor = predecessor;
		}

		// comparator
		public Comparator<SearchNode> hammingPriority() {
			return new ByHamming();
		}

		public Comparator<SearchNode> manhattanPriority() {
			return new ByManhattan();
		}

	}

	// find a solution to the initial board
	public Solver(Board initial) {
		if (initial == null)
			throw new java.lang.IllegalArgumentException("Illegal Argument");
		this.initial = initial;
		SearchNode node = new SearchNode(initial, 0, null);
		MinPQ<SearchNode> minpq = new MinPQ<SearchNode>(node.manhattanPriority());
		minpq.insert(node);
		node = minpq.delMin();
		boolean flag = node.board.isGoal(); /*
											 * flag used to indicate whether the dequeued board is the goal
											 */
		while (!flag) {
			for (Board b : node.board.neighbors()) {
				SearchNode neighbor = new SearchNode(b, node.moves + 1, node);
				if (!neighbor.board.equals(neighbor.predecessor.board))
					minpq.insert(neighbor);
			}
			node = minpq.delMin();
			flag = node.board.isGoal();
		}
		goal = node;
	}

	// is the initial board solvable?
	public boolean isSolvable() {
		int type = 0;// 0 for unknown, 1 for solvable, -1 for unsolvable
		SearchNode node1 = new SearchNode(initial, 0, null);// node1 is for the initial board
		SearchNode node2 = new SearchNode(initial.twin(), 0, null);// node2 is for the twin board
		// pq1 is for the initial board
		MinPQ<SearchNode> pq1 = new MinPQ<SearchNode>(node1.manhattanPriority());
		// pq2 is for the twin board
		MinPQ<SearchNode> pq2 = new MinPQ<SearchNode>(node2.manhattanPriority());
		pq1.insert(node1);
		pq2.insert(node2);
		node1 = pq1.delMin();
		node2 = pq2.delMin();
		if (node1.board.isGoal())
			type = 1;
		else if (node2.board.isGoal())
			type = -1;
		while (type == 0) {
			for (Board b : node1.board.neighbors()) {
				SearchNode neighbors = new SearchNode(b, node1.moves + 1, node1);
				if (!neighbors.board.equals(neighbors.predecessor.board))
					pq1.insert(neighbors);
			}
			node1 = pq1.delMin();
			if (node1.board.isGoal())
				type = 1;
			for (Board b : node2.board.neighbors()) {
				SearchNode neighbors = new SearchNode(b, node2.moves + 1, node2);
				if (neighbors.board.equals(neighbors.predecessor.board))
					pq2.insert(neighbors);
			}
			node2 = pq2.delMin();
			if (node2.board.isGoal())
				type = -1;
		}
		if (type == 1)
			return true;
		else
			return false;
	}
}
