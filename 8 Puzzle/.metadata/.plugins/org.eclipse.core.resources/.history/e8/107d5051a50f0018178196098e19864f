import java.util.Comparator;
import java.util.LinkedList;
import java.util.Queue;
import edu.princeton.cs.algs4.MinPQ;

public class Solver {

	private int moves;
	private Queue<Board> solution;

	private class SearchNode {
		private Board board; // present board
		private int moves; // number of moves to reach this board
		private SearchNode predecessor; // previous SearchNode

		private class ByHamming implements Comparator<SearchNode> {

			public int compare(SearchNode a, SearchNode b) {
				int apriority = a.moves + a.board.hamming();
				int bpriority = a.moves + a.board.hamming();
				if (apriority < bpriority)
					return -1;
				else if (apriority > bpriority)
					return +1;
				else
					return 0;
			}
		}

		private class ByManhattan implements Comparator<SearchNode> {

			public int compare(SearchNode a, SearchNode b) {
				int apriority = a.moves + a.board.manhattan();
				int bpriority = b.moves + b.board.manhattan();
				if (apriority < bpriority)
					return -1;
				else if (apriority > bpriority)
					return +1;
				else
					return 0;
			}
		}

		public SearchNode(Board board, int moves, SearchNode predecessor) {
			this.board = board;
			this.moves = moves;
			this.predecessor = predecessor;
		}

		// comparator
		public Comparator<SearchNode> hammingPriority() {
			return new ByHamming();
		}

		public Comparator<SearchNode> manhattanPriority() {
			return new ByManhattan();
		}

	}

	// find a solution to the initial board
	public Solver(Board initial) {
		if (initial == null)
			throw new java.lang.IllegalArgumentException("Illegal Argument");
		solution = new LinkedList<Board>();
		SearchNode node = new SearchNode(initial, 0, null);
		MinPQ<SearchNode> minpq = new MinPQ<SearchNode>(node.manhattanPriority());
		minpq.insert(node);
		node = minpq.delMin();
		solution.offer(node.board);
		boolean flag = node.board.isGoal(); /*
											 * flag used to indicate whether the dequeued board is the goal
											 */
		while (!flag) {
			for (Board b : node.board.neighbors()) {
				SearchNode neighbor = new SearchNode(b, node.moves + 1, node);
				minpq.insert(neighbor);
			}
			node = minpq.delMin();
			solution.offer(node.board);
			flag = node.board.isGoal();
		}
		moves = node.moves;
	}
}
