
public class Board {

	private int[][] board;
	private int dimension;
	private int hammingnumber;
	private int manhattandistance;

	// construct a board from an n-by-n array of blocks
	public Board(int[][] blocks) {
		dimension = blocks.length;
		hammingnumber = 0;
		manhattandistance = 0;
		for (int i = 0; i < dimension; i++) {
			for (int j = 0; j < dimension; j++) {
				board[i][j] = blocks[i][j];
				// number of blocks out of place
				if (board[i][j] != 0 && board[i][j] != i * dimension + j)
					hammingnumber++;
				// distance
				if (board[i][j] != 0) {
					int x = (board[i][j] - 1) / dimension;
					int y = (board[i][j] - 1) % dimension;
					manhattandistance += Math.abs(x - i) + Math.abs(y - j);
				}
			}
		}
	}

	// board dimension n
	public int dimension() {
		return dimension;
	}

	// number of blocks out of place
	public int hamming() {
		return hammingnumber;
	}

	// sum of Manhattan distances between blocks and goal
	public int manhattan() {
		return manhattandistance;
	}

	// is this board the goal board?
	public boolean isGoal() {
		return (hammingnumber == 0);
	}

	// a board that is obtained by exchanging any pair of blocks
	public Board twin() {
		int[][] blocks = new int[dimension][dimension];
		for (int i = 0; i < dimension; i++)
			for (int j = 0; j < dimension; j++)
				blocks[i][j] = board[i][j];
		if (dimension == 1)
			return new Board(blocks);
		int temp = blocks[0][0];
		blocks[0][0] = blocks[0][1];
		blocks[0][1] = temp;
		return new Board(blocks);
	}

	// does this board equal y?
	public boolean euqals(Object y) {

	}

}
