import java.util.Scanner;
import java.util.Stack;

public final class Board {

	private final int[] board;
	private final int dimension;
	private final int hammingnumber;
	private final int manhattandistance;
	private final Stack<Board> neighbors;

	// construct a board from an n-by-n array of blocks
	public Board(int[][] blocks) {
		neighbors = new Stack<Board>();
		dimension = blocks.length;
		int temphammingnumber = 0;
		int tempmanhattandistance = 0;
		board = new int[dimension * dimension];
		for (int i = 0; i < dimension; i++) {
			for (int j = 0; j < dimension; j++) {
				board[i * dimension + j] = blocks[i][j];
				// number of blocks out of place
				if (board[i * dimension + j] != 0 && board[i * dimension + j] != i * dimension + j + 1)
					temphammingnumber++;
				// distance
				if (board[i * dimension + j] != 0) {
					int x = (board[i * dimension + j] - 1) / dimension;
					int y = (board[i * dimension + j] - 1) % dimension;
					tempmanhattandistance += Math.abs(x - i) + Math.abs(y - j);
				}
			}
		}
		hammingnumber = temphammingnumber;
		manhattandistance = tempmanhattandistance;
	}

	// board dimension n
	public int dimension() {
		return dimension;
	}

	// number of blocks out of place
	public int hamming() {
		return hammingnumber;
	}

	// sum of Manhattan distances between blocks and goal
	public int manhattan() {
		return manhattandistance;
	}

	// is this board the goal board?
	public boolean isGoal() {
		return (hammingnumber == 0);
	}

	// a board that is obtained by exchanging any pair of blocks
	public Board twin() {
		int[][] blocks = new int[dimension][dimension];
		int x1 = -1, y1 = -1, x2 = -1, y2 = -1;
		for (int i = 0; i < dimension; i++)
			for (int j = 0; j < dimension; j++) {
				blocks[i][j] = board[i * dimension + j];
				if (blocks[i][j] != 0 && x1 == -1 && y1 == -1) {
					x1 = i;
					y1 = j;
				} else if (blocks[i][j] != 0 && x2 == -1 && y2 == -1) {
					x2 = i;
					y2 = j;
				}
			}
		if (dimension == 1)
			return new Board(blocks);
		int temp = blocks[x1][y1];
		blocks[x1][y1] = blocks[x2][y2];
		blocks[x2][y2] = temp;
		return new Board(blocks);
	}

	// does this board equal y?
	public boolean equals(Object y) {
		if (this == y)
			return true;
		if (y == null)
			return false;
		if (this.getClass() != y.getClass())
			return false;
		Board that = (Board) y;
		if (this.dimension != that.dimension)
			return false;
		if (this.hammingnumber != that.hammingnumber)
			return false;
		if (this.manhattandistance != that.manhattandistance)
			return false;
		for (int i = 0; i < this.dimension; i++)
			for (int j = 0; j < this.dimension; j++)
				if (this.board[i * dimension + j] != that.board[i * dimension + j])
					return false;
		return true;
	}

	// all neighboring boards
	public Iterable<Board> neighbors() {
		if (!neighbors.empty())
			return neighbors;
		int xblank = 0, yblank = 0;
		int[][] tempboard = new int[dimension][dimension];
		for (int i = 0; i < dimension; i++)
			for (int j = 0; j < dimension; j++) {
				tempboard[i][j] = board[i * dimension + j];
				if (board[i * dimension + j] == 0) {
					xblank = i;
					yblank = j;
				}
			}
		// left
		if (yblank != 0) {
			tempboard[xblank][yblank] = tempboard[xblank][yblank - 1];
			tempboard[xblank][yblank - 1] = 0;
			Board board = new Board(tempboard);
			neighbors.push(board);
			tempboard[xblank][yblank - 1] = tempboard[xblank][yblank];
			tempboard[xblank][yblank] = 0;
		}
		// right
		if (yblank != dimension - 1) {
			tempboard[xblank][yblank] = tempboard[xblank][yblank + 1];
			tempboard[xblank][yblank + 1] = 0;
			Board board = new Board(tempboard);
			neighbors.push(board);
			tempboard[xblank][yblank + 1] = tempboard[xblank][yblank];
			tempboard[xblank][yblank] = 0;
		}
		// up
		if (xblank != 0) {
			tempboard[xblank][yblank] = tempboard[xblank - 1][yblank];
			tempboard[xblank - 1][yblank] = 0;
			Board board = new Board(tempboard);
			neighbors.push(board);
			tempboard[xblank - 1][yblank] = tempboard[xblank][yblank];
			tempboard[xblank][yblank] = 0;
		}
		// down
		if (xblank != dimension - 1) {
			tempboard[xblank][yblank] = tempboard[xblank + 1][yblank];
			tempboard[xblank + 1][yblank] = 0;
			Board board = new Board(tempboard);
			neighbors.push(board);
			tempboard[xblank + 1][yblank] = tempboard[xblank][yblank];
			tempboard[xblank][yblank] = 0;
		}
		return neighbors;
	}

	// string representation of this board
	public String toString() {
		String s = Integer.toString(dimension) + "\n";
		for (int i = 0; i < dimension; i++)
			for (int j = 0; j < dimension; j++) {
				String number = Integer.toString(board[i * dimension + j]);
				s += " " + number;
				if (j == dimension - 1)
					s += "\n";
			}
		return s;
	}

	// unit test
	public static void main(String[] args) {
		System.out.println("Unit test of Board");
		int dimension = 0;
		Scanner sc = new Scanner(System.in);
		dimension = sc.nextInt();
		int[][] blocks = new int[dimension][dimension];
		for (int i = 0; i < dimension; i++)
			for (int j = 0; j < dimension; j++)
				blocks[i][j] = sc.nextInt();
		sc.close();
		Board board = new Board(blocks);
		String s = board.toString();
		int mahanttan = board.manhattan();
		System.out.println(mahanttan);
		System.out.println(s);
		Stack<Board> neighbors = (Stack<Board>) board.neighbors();
		for (Board b : neighbors) {
			s = b.toString();
			System.out.println(s);
		}
	}
}
