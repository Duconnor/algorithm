import edu.princeton.cs.algs4.*;

public class Percolation {
	private WeightedQuickUnionUF uf;
	private int grid[][];
	private int n;
	private int count;

	// create a n*n grid, with all sites blocked
	public Percolation(int n) {
		uf = new WeightedQuickUnionUF(n + 2);
		count = 0;
		for (int i = 0; i < n; i++) {
			uf.union(0, i);// 把虚拟的最上面的block与第一排的全部相连
			uf.union(n + 1, (n - 1) * n + i);// 把虚拟的最下面的block与最后一排的全部相连
		}
		this.n = n;
		grid = new int[n][n];
		// i是行数，j是列数
		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++)
				grid[i][j] = 0;
	}

	// open site (row,col)
	public void open(int row, int col) {
		try {
			grid[row][col] = 1;
			count++;
			if ((row - 1 >= 0) && grid[row - 1][col] == 1)
				uf.union(row * n + col + 1, (row - 1) * n + col + 1);
			else if ((row + 1 < n) && grid[row + 1][col] == 1)
				uf.union(row * n + col + 1, (row + 1) * n + col + 1);
			else if ((col - 1 >= 0) && grid[row][col - 1] == 1)
				uf.union(row * n + col + 1, row * n + col);
			else if ((col + 1 < n) && grid[row][col + 1] == 1)
				uf.union(row * n + col + 1, row * n + col + 2);
		} catch (Exception e) {
			System.out.println("java.lang.IllegalArgumentException");
		}
	}

	// is site(row,col) open?
	public boolean isOpean(int row, int col) {
		boolean flag = false;
		try {
			if (grid[row][col] == 1)
				flag = true;
		} catch (Exception e) {
			System.out.println("java.lang.IllegalArgumentException");
		}
		return flag;
	}

	// is site(row,col) full?
	public boolean isFull(int row, int col) {
		boolean flag = false;
		try {
			if (uf.connected(0, row * n + col + 1))
				flag = true;
		} catch (Exception e) {
			System.out.println("java.lang.IllegalArgumentException");
		}
		return flag;
	}

	// number of open sites
	public int numberOfOpeanSites() {
		return count;
	}

	// does the system percolate?
	public boolean percolates() {
		return (uf.connected(0, n + 1));
	}

	// test client
	public static void main(String[] args) {
	}
}
