import java.util.Iterator;
import edu.princeton.cs.algs4.StdRandom;
import java.util.NoSuchElementException;

public class RandomizedQueue<Item> implements Iterable<Item> {
	private class Node {
		private Item val;
		private Node previous;
		private Node next;
	}

	private class QueueIterator implements Iterator<Item> {
		private Node iterator;

		public QueueIterator() {
			int index = StdRandom.uniform(count);
			Node p = first;
			while (index != 1)
				p = p.next;
			iterator = p;
		}

		public boolean hasNext() {
			return (iterator != null);
		}

		public Item next() {
			if (!hasNext())
				throw new NoSuchElementException("no element left");
			Item item = iterator.val;
			iterator = iterator.next;
			return item;
		}

	}

	private Node first;
	private Node last;
	private int count;

	// construct an empty randomized queue
	public RandomizedQueue() {
		first = new Node();
		last = new Node();
		first = null;
		last = null;
		count = 0;
	}

	// is the randomized queue empty?
	public boolean isEmpty() {
		return (first == null);
	}

	// return the number of items on the randomized queue
	public int size() {
		return count;
	}

	// add the item
	public void enqueue(Item item) {
		if (item == null)
			throw new IllegalArgumentException("illegal argument");
		Node newnode = new Node();
		newnode.val = item;
		newnode.next = null;
		if (isEmpty()) {
			newnode.previous = null;
			last = newnode;
			first = last;
		} else {
			last.next = newnode;
			newnode.previous = last;
			last = newnode;
		}
		count++;
	}

	// remove and return a random item
	public Item dequeue() {
		if (isEmpty())
			throw new NoSuchElementException("queue is empty");
		int index = StdRandom.uniform(count) + 1;
		Node delete = first;
		while (index != 1)
			delete = delete.next;
		Item item = delete.val;
		delete.previous.next = delete.next;
		return item;
	}

	// return a random item (but do not remove it)
	public Item sample() {
		if (isEmpty())
			throw new NoSuchElementException("queue is empty");
		int index = StdRandom.uniform(count) + 1;
		Node delete = first;
		while (index != 1)
			delete = delete.next;
		Item item = delete.val;
		return item;
	}

	// return an independent iterator over items in random order
	public Iterator<Item> iterator() {
		return new QueueIterator();
	}

	// unit testing
	public static void main(String[] args) {
		RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>();
		for (int i = 0; i < 10; i++)
			rq.enqueue(StdRandom.uniform(100));
		int x = rq.first.val;
		System.out.println(x);
		/*for (int i : rq)
			System.out.println(i);
		for (int i = 0; i < 2; i++) {
			int x = rq.dequeue();
			System.out.print(x + " ");
		}
		for (int i : rq)
			System.out.println(i);*/
	}
}
