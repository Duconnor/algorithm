import java.util.Iterator;
import java.util.NoSuchElementException;

public class Deque<Item> implements Iterable<Item> {
	private Node first;
	private Node last;
	private int number;

	private class Node {
		private Item val;
		private Node next;
		private Node previous;
	}

	private class ListIterator implements Iterator<Item> {
		private Node ite = first;

		public boolean hasNext() {
			return (ite != null);
		}

		public Item next() {
			if (!hasNext())
				throw new NoSuchElementException("no elements in the deque");
			Item item = ite.val;
			ite = ite.next;
			return item;
		}
	}

	// construct an empty deque
	public Deque() {
		first = new Node();
		last = new Node();
		first = null;
		last = null;
		number = 0;
	}

	// is the deque empty?
	public boolean isEmpty() {
		return (first == null);
	}

	// return the number of items on the deque
	public int size() {
		return number;
	}

	// add the item to the front
	public void addFirst(Item item) {
		if (item == null)
			throw new IllegalArgumentException("illegal argument");
		Node newnode = new Node();
		newnode.val = item;
		newnode.next = first;
		newnode.previous = null;
		if (isEmpty()) {
			first = newnode;
			last = first;
		} else
			first = newnode;
		number++;
	}

	// add the item to the end
	public void addLast(Item item) {
		if (item == null)
			throw new IllegalArgumentException("illegal argument");
		Node newnode = new Node();
		newnode.val = item;
		newnode.next = null;
		if (isEmpty()) {
			newnode.previous = null;
			last = newnode;
			first = last;
		} else {
			newnode.previous = last;
			last.next = newnode;
			last = newnode;
		}
		number++;
	}

	// remove and return the item from the front
	public Item removeFirst() {
		if (isEmpty())
			throw new NoSuchElementException("deque is empty");
		Item item = first.val;
		first = first.next;
		if (!isEmpty())
			first.previous = null;
		number--;
		return item;
	}

	// remove and return the item from the end
	public Item removeLast() {
		if (isEmpty())
			throw new NoSuchElementException("deque is empty");
		Item item = last.val;
		last = last.previous;
		if (!isEmpty())
			last.next = null;
		number--;
		return item;
	}

	// return an iterator over items in order from front to end
	public Iterator<Item> iterator() {
		if (isEmpty())
			throw new NoSuchElementException("deque is empty");
		return new ListIterator();
	}

	// unit testing
	public static void main(String[] args) {
		Deque<Integer> deq = new Deque<Integer>();
		deq.addFirst(3);
		//deq.addLast(4);
		deq.addFirst(5);
		if(!deq.isEmpty())
			System.out.println("false");
		for (int i : deq)
			System.out.println(i);
		System.out.println(deq.number);
		deq.removeFirst();
		int x = deq.removeLast();
		System.out.println(x + "xxx");
		for (int i : deq)
			System.out.println(i);
	}

}
