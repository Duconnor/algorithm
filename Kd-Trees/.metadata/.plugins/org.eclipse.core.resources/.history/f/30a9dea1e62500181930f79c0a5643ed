import edu.princeton.cs.algs4.SET;
import edu.princeton.cs.algs4.Point2D;
import edu.princeton.cs.algs4.RectHV;
import java.util.Stack;

public class PointSET {

	private SET<Point2D> pointSet;

	// construct an empty set of points
	public PointSET() {
		pointSet = new SET<Point2D>();
	}

	// is the set empty?
	public boolean isEmpty() {
		return pointSet.isEmpty();
	}

	// number of points in the set
	public int size() {
		return pointSet.size();
	}

	// add the point to the set (if it is not already in the set)
	public void insert(Point2D p) {
		if (p == null)
			throw new java.lang.IllegalArgumentException("null argument");
		pointSet.add(p);
	}

	// does the set contain point p?
	public boolean contains(Point2D p) {
		if (p == null)
			throw new java.lang.IllegalArgumentException("null argument");
		return pointSet.contains(p);
	}

	// draw all points to standard draw
	public void draw() {
		for (Point2D p : pointSet)
			p.draw();
	}

	// all points that are inside the rectangle (or on the boundary)
	public Iterable<Point2D> range(RectHV rect) {
		if (rect == null)
			throw new java.lang.IllegalArgumentException("null argument");
		Stack<Point2D> rangePoints = new Stack<Point2D>();
		for (Point2D p : pointSet)
			if (rect.contains(p))
				rangePoints.push(p);
		return rangePoints;
	}

	// a nearest neighbor in the set to point p, null if the set is empty
	public Point2D nearest(Point2D p) {
		if (pointSet.isEmpty())
			return null;
		double nearestDistance = Double.MAX_VALUE, distance = Double.MAX_VALUE;
		Point2D nearestPoint = null;
		for (Point2D point : pointSet) {
			distance = point.distanceTo(p);
			if (point.distanceSquaredTo(p) < nearestDistance) {
				nearestDistance = distance;
				nearestPoint = point;
			}
		}
		return nearestPoint;
	}

	// unit testing to methods
	public static void main(String[] args) {
	}
}
